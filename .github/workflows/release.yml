name: Release

on:
  push:
    branches: [ main ]

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Check Version
        id: version_check
        run: |
          CHANGES=$(node ./bin/get-next-versions.js --json)
          echo "changes=$CHANGES" >> $GITHUB_OUTPUT
          echo "$CHANGES" # For debugging

      - name: Update Version
        if: ${{ fromJSON(steps.version_check.outputs.changes)['get-next-versions'].hasChanges }}
        id: update_version
        run: |
          NEW_VERSION=${{ fromJSON(steps.version_check.outputs.changes)['get-next-versions'].nextVersion }}
          # Update package.json version
          npm version $NEW_VERSION --no-git-tag-version
          # Stage the changed package.json
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add package.json
          git commit -m "chore: bump version to ${NEW_VERSION} [skip ci]"
          git push
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT

      - name: Create Release
        if: steps.update_version.outputs.new_version != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_VERSION="${{ steps.update_version.outputs.new_version }}"
          # Create and push tag
          git tag "v${NEW_VERSION}"
          git push origin "v${NEW_VERSION}"
          
          # Create GitHub Release
          if [ "${NEW_VERSION%.*}" -lt 1 ]; then
            PRE_RELEASE="--prerelease"
          fi
          gh release create "v${NEW_VERSION}" \
            --title "v${NEW_VERSION}" \
            --generate-notes \
            ${PRE_RELEASE}


      - name: Publish to NPM
        if: steps.update_version.outputs.new_version != ''
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm config set registry https://registry.npmjs.org/
          npm ci
          npm test
          npm publish
          
      - name: Publish to GitHub Packages
        if: steps.update_version.outputs.new_version != ''
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm config set registry https://npm.pkg.github.com
          npm config set //npm.pkg.github.com/:_authToken $NODE_AUTH_TOKEN
          npm publish
